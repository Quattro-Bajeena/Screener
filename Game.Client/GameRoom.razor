@using Core
@using Core.Client.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Screener.Data
@using System.Security.Claims
@using System.Security.Principal
@using global::Game.Consts
@using global::Game.Contracts.Requests
@using global::Game.Contracts.Responses
@using global::Game.Models

<h3>GameRoom</h3>

@if (_gameRoom == null)
{
    <div>Game loading...</div>
}
else
{
    <h3>Game room name: @_gameRoom.Name</h3>
    <br />
    <p>Players:</p>
    @foreach (ApplicationUser user in _gameRoom.Users)
    {

        <p>
            @if (_currentUser.HasClaim(claim=> claim.Type == UserClaims.Id && claim.Value == user.Id))
            {
                <div>YOU</div>
            }
            <div>@user.Id</div>
            <div>@user.UserName</div>
        </p>

    }

    <br />
    <button>Start Game</button>
    <button>Change rules</button>
}


@code {

    [Parameter]
    public string? Id { get; set; }

    [Inject]
    private ApiClient ApiClient { get; set; } = default!;

    [Inject]
    private UserService UserService { get; set; } = default!;

    private Models.GameRoom? _gameRoom;

    private ClaimsPrincipal? _currentUser;

    protected async override Task OnInitializedAsync()
    {
        GetRoomResponse response = await ApiClient.GetAsync<GetRoomRequest, GetRoomResponse>(GameRoutes.GetRoom, new GetRoomRequest { Id = Id });
        _currentUser = await UserService.GetCurrentUser();
        _gameRoom = response?.Room;
    }
}
